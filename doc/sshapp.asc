SSH Agent application : Common Technical Specifications 
=======================================================
Ledger Firmware Team <hello@ledger.fr>
Application version 1.1 - 25th of July 2016

== 1.0 
  - Initial release

== 1.1 
  - Parse SSH blob for SSH authentication
  - Add Curve25519 support for public key generation
  - Add raw blob hash for PGP import over prime256v1 and Curve25519
  - Add ECDH over prime256v1 and Curve25519 for PGP decryption


== About

This application describes the APDU messages interface to communicate with the SSH and PGP Agents applications. 

The application covers the following functionalities : 

  - Retrieve a public key given a BIP 32 path (over prime256v1 or Curve25519)
  - Confirm the signature of a SSH blob over a given BIP 32 path, displaying the user name associated to the request
  - Confirm the signature of a raw blob for PGP import
  - Get the secret associated to an ECDH exchange for PGP decryption
  
The application interface can be accessed over HID or BLE

== General purpose APDUs

=== GET PUBLIC KEY

==== Description

This command returns the public key for the given BIP 32 path following user confirmation

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   02   |  00 |   01 : return public key on prime256v1

                           02 : return public key on Curve25519 | variable | variable
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index (big endian)                                               | 4
| ...                                                                               | 4
| Last derivation index (big endian)                                                | 4
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Public Key length                                                                 | 1
| Uncompressed Public Key                                                           | var
|==============================================================================================================================


=== SIGN SSH BLOB

==== Description

This command signs the given SSH blob using SHA-256 over prime256v1 or Curve25519, and optionally returns the associated public key.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   04   |  00 : first transaction data block

                    01 : subsequent transaction data block

                                      |   01 : sign on prime256v1

                           								02 : sign on Curve25519

                                          80 (mask) : return public key if present
                                       | variable | variable
|==============================================================================================================================

'Input data (first transaction data block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index (big endian)                                               | 4
| ...                                                                               | 4
| Last derivation index (big endian)                                                | 4
| blob chunk                                                                        | variable
|==============================================================================================================================

'Input data (other transaction data block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| blob                                                                              | variable
|==============================================================================================================================


'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| DER signature (prime256v1) or R|S (Curve25519)                                    | variable
| Public key if requested                                                           | variable
|======================================================================================================

=== SIGN GENERIC HASH

==== Description

This command signs the given generic blob using SHA-256 over prime256v1 or Curve25519


==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   06   |  00 : first transaction data block

                    01 : subsequent transaction data block

                    80 : bitmask marking the last data block to sign

                                      |   01 : sign on prime256v1

                           								02 : sign on Curve25519

                                       | variable | variable
|==============================================================================================================================

'Input data (first transaction data block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index (big endian)                                               | 4
| ...                                                                               | 4
| Last derivation index (big endian)                                                | 4
| blob chunk                                                                        | variable
|==============================================================================================================================

'Input data (other transaction data block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| blob                                                                              | variable
|==============================================================================================================================


'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| DER signature                                                                     | variable
|======================================================================================================

=== SIGN DIRECT HASH

==== Description

This command signs the given 32 bytes blob over prime256v1 or Curve25519


==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   08   |  00 


                                      |   01 : sign on prime256v1

                           								02 : sign on Curve25519
                                       | variable | variable
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index (big endian)                                               | 4
| ...                                                                               | 4
| Last derivation index (big endian)                                                | 4
| Hash to sign                                                                      | 32
|==============================================================================================================================


'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| DER signature                                                                     | variable
|======================================================================================================


=== GET ECDH SECRET

==== Description

This command returns the ECDH secret associated to the given public key over prime256v1 or Curve25519


==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   0A   |  00

                                      |   01 : perform ECDH on prime256v1

                           								02 : perform ECDH on Curve25519
                                       | variable | 65
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index (big endian)                                               | 4
| ...                                                                               | 4
| Last derivation index (big endian)                                                | 4
| Remote public key                                                                 | 65
|==============================================================================================================================


'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| ECDH secret as X|Y point                                                          | 65
|======================================================================================================


== Transport protocol

=== General transport description

Ledger APDUs requests and responses are encapsulated using a flexible protocol allowing to fragment large payloads over different underlying transport mechanisms. 

The common transport header is defined as follows : 

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Communication channel ID (big endian)                                             | 2
| Command tag                                                                       | 1
| Packet sequence index (big endian)                                                | 2
| Payload                                                                           | var
|==============================================================================================================================

The Communication channel ID allows commands multiplexing over the same physical link. It is not used for the time being, and should be set to 0101 to avoid compatibility issues with implementations ignoring a leading 00 byte.

The Command tag describes the message content. Use TAG_APDU (0x05) for standard APDU payloads, or TAG_PING (0x02) for a simple link test.

The Packet sequence index describes the current sequence for fragmented payloads. The first fragment index is 0x00.

=== APDU Command payload encoding

APDU Command payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU length (big endian)                                                          | 2
| APDU CLA                                                                          | 1
| APDU INS                                                                          | 1
| APDU P1                                                                           | 1
| APDU P2                                                                           | 1
| APDU length                                                                       | 1
| Optional APDU data                                                                | var
|==============================================================================================================================

APDU payload is encoded according to the APDU case 

[width="80%"]
|=======================================================================================
| Case Number  | *Lc* | *Le* | Case description
|   1          |  0   |  0   | No data in either direction - L is set to 00
|   2          |  0   |  !0  | Input Data present, no Output Data - L is set to Lc
|   3          |  !0  |  0   | Output Data present, no Input Data - L is set to Le
|   4          |  !0  |  !0  | Both Input and Output Data are present - L is set to Lc
|=======================================================================================

=== APDU Response payload encoding

APDU Response payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU response length (big endian)                                                 | 2
| APDU response data and Status Word                                                | var
|==============================================================================================================================

=== USB mapping

Messages are exchanged with the dongle over HID endpoints over interrupt transfers, with each chunk being 64 bytes long. The HID Report ID is ignored.

=== BLE mapping

A similar encoding is used over BLE, without the Communication channel ID.

The application acts as a GATT server defining service UUID D973F2E0-B19E-11E2-9E96-0800200C9A66

When using this service, the client sends requests to the characteristic D973F2E2-B19E-11E2-9E96-0800200C9A66, and gets notified on the characteristic D973F2E1-B19E-11E2-9E96-0800200C9A66 after registering for it. 

Requests are encoded using the standard BLE 20 bytes MTU size

== Status Words 

The following standard Status Words are returned for all APDUs - some specific Status Words can be used for specific commands and are mentioned in the command description.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Canceled by user)
|   6A80   | Invalid data
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (Internal error, please report)
|   9000   | Normal ending of the command
|================================================================================================
